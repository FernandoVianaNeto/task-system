// Code generated by MockGen. DO NOT EDIT.
// Source: delete_task.usecase.go
//
// Generated by this command:
//
//	mockgen -source delete_task.usecase.go -package domain_usecase -destination /home/fernandoviana/Documentos/Pessoal/projetos/task-system/test/mocks/domain_usecase/mock_delete_task.usecase.go
//

// Package domain_usecase is a generated GoMock package.
package domain_usecase

import (
	context "context"
	reflect "reflect"
	dto "task-system/internal/domain/dto"

	gomock "go.uber.org/mock/gomock"
)

// MockDeleteTaskUsecaseInterface is a mock of DeleteTaskUsecaseInterface interface.
type MockDeleteTaskUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteTaskUsecaseInterfaceMockRecorder
}

// MockDeleteTaskUsecaseInterfaceMockRecorder is the mock recorder for MockDeleteTaskUsecaseInterface.
type MockDeleteTaskUsecaseInterfaceMockRecorder struct {
	mock *MockDeleteTaskUsecaseInterface
}

// NewMockDeleteTaskUsecaseInterface creates a new mock instance.
func NewMockDeleteTaskUsecaseInterface(ctrl *gomock.Controller) *MockDeleteTaskUsecaseInterface {
	mock := &MockDeleteTaskUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockDeleteTaskUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteTaskUsecaseInterface) EXPECT() *MockDeleteTaskUsecaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDeleteTaskUsecaseInterface) Execute(ctx context.Context, input dto.DeleteTaskDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockDeleteTaskUsecaseInterfaceMockRecorder) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDeleteTaskUsecaseInterface)(nil).Execute), ctx, input)
}
