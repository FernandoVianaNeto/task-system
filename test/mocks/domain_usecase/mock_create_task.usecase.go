// Code generated by MockGen. DO NOT EDIT.
// Source: create_task.usecase.go
//
// Generated by this command:
//
//	mockgen -source create_task.usecase.go -package domain_usecase -destination /home/fernandoviana/Documentos/Pessoal/projetos/task-system/test/mocks/domain_usecase/mock_create_task.usecase.go
//

// Package domain_usecase is a generated GoMock package.
package domain_usecase

import (
	context "context"
	reflect "reflect"
	dto "task-system/internal/domain/dto"

	gomock "go.uber.org/mock/gomock"
)

// MockCreateTaskUseCaseInterface is a mock of CreateTaskUseCaseInterface interface.
type MockCreateTaskUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTaskUseCaseInterfaceMockRecorder
}

// MockCreateTaskUseCaseInterfaceMockRecorder is the mock recorder for MockCreateTaskUseCaseInterface.
type MockCreateTaskUseCaseInterfaceMockRecorder struct {
	mock *MockCreateTaskUseCaseInterface
}

// NewMockCreateTaskUseCaseInterface creates a new mock instance.
func NewMockCreateTaskUseCaseInterface(ctrl *gomock.Controller) *MockCreateTaskUseCaseInterface {
	mock := &MockCreateTaskUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockCreateTaskUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateTaskUseCaseInterface) EXPECT() *MockCreateTaskUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateTaskUseCaseInterface) Execute(ctx context.Context, input dto.CreateTaskDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateTaskUseCaseInterfaceMockRecorder) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateTaskUseCaseInterface)(nil).Execute), ctx, input)
}
