// Code generated by MockGen. DO NOT EDIT.
// Source: list_task.usecase.go
//
// Generated by this command:
//
//	mockgen -source list_task.usecase.go -package domain_usecase -destination /home/fernandoviana/Documentos/Pessoal/projetos/task-system/test/mocks/domain_usecase/mock_list_task.usecase.go
//

// Package domain_usecase is a generated GoMock package.
package domain_usecase

import (
	context "context"
	reflect "reflect"
	dto "task-system/internal/domain/dto"
	entities "task-system/internal/domain/entities"

	gomock "go.uber.org/mock/gomock"
)

// MockListTaskUsecaseInterface is a mock of ListTaskUsecaseInterface interface.
type MockListTaskUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockListTaskUsecaseInterfaceMockRecorder
}

// MockListTaskUsecaseInterfaceMockRecorder is the mock recorder for MockListTaskUsecaseInterface.
type MockListTaskUsecaseInterfaceMockRecorder struct {
	mock *MockListTaskUsecaseInterface
}

// NewMockListTaskUsecaseInterface creates a new mock instance.
func NewMockListTaskUsecaseInterface(ctrl *gomock.Controller) *MockListTaskUsecaseInterface {
	mock := &MockListTaskUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockListTaskUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListTaskUsecaseInterface) EXPECT() *MockListTaskUsecaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockListTaskUsecaseInterface) Execute(ctx context.Context, input dto.ListTaskDto) ([]*entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].([]*entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockListTaskUsecaseInterfaceMockRecorder) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockListTaskUsecaseInterface)(nil).Execute), ctx, input)
}
