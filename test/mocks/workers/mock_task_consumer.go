// Code generated by MockGen. DO NOT EDIT.
// Source: task_consumer.go
//
// Generated by this command:
//
//	mockgen -source task_consumer.go -package workers -destination /home/fernandoviana/Documentos/Pessoal/projetos/task-system/test/mocks/workers/mock_task_consumer.go
//

// Package workers is a generated GoMock package.
package workers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKafkaConsumerInterface is a mock of KafkaConsumerInterface interface.
type MockKafkaConsumerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaConsumerInterfaceMockRecorder
}

// MockKafkaConsumerInterfaceMockRecorder is the mock recorder for MockKafkaConsumerInterface.
type MockKafkaConsumerInterfaceMockRecorder struct {
	mock *MockKafkaConsumerInterface
}

// NewMockKafkaConsumerInterface creates a new mock instance.
func NewMockKafkaConsumerInterface(ctrl *gomock.Controller) *MockKafkaConsumerInterface {
	mock := &MockKafkaConsumerInterface{ctrl: ctrl}
	mock.recorder = &MockKafkaConsumerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaConsumerInterface) EXPECT() *MockKafkaConsumerInterfaceMockRecorder {
	return m.recorder
}

// ReadMessage mocks base method.
func (m *MockKafkaConsumerInterface) ReadMessage(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockKafkaConsumerInterfaceMockRecorder) ReadMessage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockKafkaConsumerInterface)(nil).ReadMessage), ctx)
}
