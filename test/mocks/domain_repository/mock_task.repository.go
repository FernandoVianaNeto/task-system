// Code generated by MockGen. DO NOT EDIT.
// Source: task.repository.go
//
// Generated by this command:
//
//	mockgen -source task.repository.go -package domain_repository -destination /home/fernandoviana/Documentos/Pessoal/projetos/task-system/test/mocks/domain_repository/mock_task.repository.go
//

// Package domain_repository is a generated GoMock package.
package domain_repository

import (
	context "context"
	reflect "reflect"
	dto "task-system/internal/domain/dto"
	entities "task-system/internal/domain/entities"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskRepositoryInterface is a mock of TaskRepositoryInterface interface.
type MockTaskRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryInterfaceMockRecorder
}

// MockTaskRepositoryInterfaceMockRecorder is the mock recorder for MockTaskRepositoryInterface.
type MockTaskRepositoryInterfaceMockRecorder struct {
	mock *MockTaskRepositoryInterface
}

// NewMockTaskRepositoryInterface creates a new mock instance.
func NewMockTaskRepositoryInterface(ctrl *gomock.Controller) *MockTaskRepositoryInterface {
	mock := &MockTaskRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepositoryInterface) EXPECT() *MockTaskRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskRepositoryInterface) CreateTask(ctx context.Context, input entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskRepositoryInterfaceMockRecorder) CreateTask(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).CreateTask), ctx, input)
}

// DeleteTaskByUuid mocks base method.
func (m *MockTaskRepositoryInterface) DeleteTaskByUuid(ctx context.Context, input dto.DeleteTaskDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskByUuid", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskByUuid indicates an expected call of DeleteTaskByUuid.
func (mr *MockTaskRepositoryInterfaceMockRecorder) DeleteTaskByUuid(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskByUuid", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).DeleteTaskByUuid), ctx, input)
}

// ListTask mocks base method.
func (m *MockTaskRepositoryInterface) ListTask(ctx context.Context, input dto.ListTaskDto) ([]*entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTask", ctx, input)
	ret0, _ := ret[0].([]*entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTask indicates an expected call of ListTask.
func (mr *MockTaskRepositoryInterfaceMockRecorder) ListTask(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTask", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).ListTask), ctx, input)
}

// UpdateTaskStatus mocks base method.
func (m *MockTaskRepositoryInterface) UpdateTaskStatus(ctx context.Context, input dto.UpdateTaskStatusDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatus", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus.
func (mr *MockTaskRepositoryInterfaceMockRecorder) UpdateTaskStatus(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).UpdateTaskStatus), ctx, input)
}
