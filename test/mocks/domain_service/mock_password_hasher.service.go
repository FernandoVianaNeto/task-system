// Code generated by MockGen. DO NOT EDIT.
// Source: password_hasher.service.go
//
// Generated by this command:
//
//	mockgen -source password_hasher.service.go -package domain_service -destination /home/fernandoviana/Documentos/Pessoal/projetos/task-system/test/mocks/domain_service/mock_password_hasher.service.go
//

// Package domain_service is a generated GoMock package.
package domain_service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPasswordHasherServiceInterface is a mock of PasswordHasherServiceInterface interface.
type MockPasswordHasherServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordHasherServiceInterfaceMockRecorder
}

// MockPasswordHasherServiceInterfaceMockRecorder is the mock recorder for MockPasswordHasherServiceInterface.
type MockPasswordHasherServiceInterfaceMockRecorder struct {
	mock *MockPasswordHasherServiceInterface
}

// NewMockPasswordHasherServiceInterface creates a new mock instance.
func NewMockPasswordHasherServiceInterface(ctrl *gomock.Controller) *MockPasswordHasherServiceInterface {
	mock := &MockPasswordHasherServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPasswordHasherServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordHasherServiceInterface) EXPECT() *MockPasswordHasherServiceInterfaceMockRecorder {
	return m.recorder
}

// HashPassword mocks base method.
func (m *MockPasswordHasherServiceInterface) HashPassword(password string, cost int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password, cost)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockPasswordHasherServiceInterfaceMockRecorder) HashPassword(password, cost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPasswordHasherServiceInterface)(nil).HashPassword), password, cost)
}
